# -*- coding: utf-8 -*-
# -----------------------------------------------------------

"""
# 让 FastAPI 后端能够启动后台任务的辅助函数

Cross-Venue Crypto Order-Book Aggregator
# -----------------------------------------------------------

========================================
import asyncio

A **self-contained Python 3.11 script** that pulls Level-2 depth from multiple


centralised exchanges (CEX) via *ccxt.pro* WebSockets **and** from on-chain
async def start_tasks(agg: "Aggregator"):

limit-order DEX protocols (dYdX v4 & Serum). It then normalises price ticks,
    """

merges all ladders into one unified order-book, and publishes both: 
    后端调用这个函数后，所有交易所/DEX 的 WebSocket 就会并行启动，


1. A human-readable top-of-book printout in the terminal every second.
    并把合并后的挂单结果实时写入 `agg.cache`。

2. A JSON payload to Redis (pub/sub) so you can plug a dashboard later.
    """


No external services are required other than the exchanges themselves and a
    tick = 0.01                                # 与脚本顶部保持一致

local Redis server (optional).  The whole file is ~250 lines including docs


and can run on a basic VPS.
    # 1) 启动所有 CEX 适配器任务


Usage
    cexs = [ExchangeAdapter(e) for e in CEXES]

-----
    for c in cexs:

```bash
        for sym in SYMBOLS:

python -m venv venv && source venv/bin/activate
            asyncio.create_task(c.stream(sym, tick))

pip install -U ccxtpro websockets redis ujson asyncio aiohttp


python aggregator.py
    # 2) 启动 DEX（示例 BTC）

```
    dydx  = DyDxAdapter("BTC-USD", tick)


Configuration lives at the top of the file—just change the `SYMBOL` list or
    serum = SerumAdapter("9wFFo5AFZj7EBzLwGxFh8uRjwYwRApZW2Z7hJNPmT97z", tick)

add more exchanges / DEX connectors.
    asyncio.create_task(dydx.run())

"""
    asyncio.create_task(serum.run())

from __future__ import annotations


import asyncio, json, math, time, logging, os, signal
    # 3) 聚合循环：每秒写入 agg.cache

from typing import Dict, List, Tuple
    async def loop():


# ------------- USER CONFIG -------------------------------------------------- #
        while True:

# Spot / perp symbols in ccxt notation
            for sym in SYMBOLS:

SYMBOLS = ["BTC/USDT", "ETH/USDT"]
                books = [c.books.get(sym, {}) for c in cexs]

# CEX id list — any exchange supported by ccxt.pro with WS order-book
                if sym.startswith("BTC"):

CEXES = ["binance", "kraken", "coinbase"]
                    books += [dydx.ladder, serum.ladder]

# Depth levels to keep per book (None = full exchange limit)
                agg.cache[sym] = agg.merge(books)

DEPTH_LIMIT = 100
            await asyncio.sleep(1)

# Redis output (set to None to disable)


REDIS_URL = os.environ.get("REDIS_URL", "redis://localhost:6379/0")
    asyncio.create_task(loop())

# ---------------------------------------------------------------------------- #


import ccxt.pro as ccxtpro

try:

    import redis.asyncio as aioredis  # redis>=4.3 provides asyncio API

except ImportError:

    aioredis = None  # Redis is optional


logging.basicConfig(level=logging.INFO,

                    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")

log = logging.getLogger("aggregator")


# ----------------------- DATA STRUCTURES ------------------------------------ #

# Ladder map: { price: {"bid": qty, "ask": qty } }

Ladder = Dict[float, Dict[str, float]]


class ExchangeAdapter:

    """Adapter that streams L2 order-book for one CEX via ccxt.pro."""

    def __init__(self, exchange_id: str, symbols: List[str]):

        self.id = exchange_id

        self.symbols = symbols

        self.exchange = getattr(ccxtpro, exchange_id)({"enableRateLimit": True})

        self.books: Dict[str, Ladder] = {}


    async def stream_symbol(self, symbol: str, tick_norm: float):

        while True:

            try:

                ob = await self.exchange.watch_order_book(symbol, limit=DEPTH_LIMIT)

                self.books[symbol] = self._to_ladder(ob, tick_norm)

            except Exception as e:

                log.warning(f"{self.id}:{symbol} stream error: {e}")

                await asyncio.sleep(5)


    @staticmethod

    def _to_ladder(ob, tick_norm: float) -> Ladder:

        ladder: Ladder = {}

        for side, key in [(ob["bids"], "bid"), (ob["asks"], "ask")]:

            for price, qty in side:

                p = round(price / tick_norm) * tick_norm

                ladder.setdefault(p, {"bid": 0.0, "ask": 0.0})

                ladder[p][key] += qty

        return ladder


    async def close(self):

        await self.exchange.close()


# ----------------------- DEX CONNECTORS ------------------------------------- #

class DyDxAdapter:

    """Minimal dYdX v4 Indexer WebSocket order-book adapter."""

    URL = "wss://indexer.dydx.trade/v4/ws"


    def __init__(self, market: str, tick_norm: float):

        self.market = market

        self.tick = tick_norm

        self.ladder: Ladder = {}


    async def run(self):

        import websockets, ujson

        async for ws in websockets.connect(self.URL, ping_interval=None):

            try:

                await ws.send(ujson.dumps({"type": "subscribe", "channel": "orderbook", "id": self.market}))

                async for msg in ws:

                    data = ujson.loads(msg)

                    if data.get("type") == "subscribed":

                        continue

                    if data.get("type") == "snapshot":

                        self.ladder = self._parse_rows(data["data"], full=True)

                    elif data.get("type") == "delta":

                        delta = self._parse_rows(data["data"], full=False)

                        for p, d in delta.items():

                            row = self.ladder.setdefault(p, {"bid": 0.0, "ask": 0.0})

                            row["bid"] += d["bid"]

                            row["ask"] += d["ask"]

            except Exception as e:

                log.warning("dYdX stream error %s", e)

                await asyncio.sleep(5)


    def _parse_rows(self, rows, full: bool) -> Ladder:

        ld: Ladder = {}

        for side in ("bids", "asks") if full else ("bidsDelta", "asksDelta"):

            key = "bid" if "bid" in side else "ask"

            for price, qty in rows.get(side, []):

                p = round(float(price) / self.tick) * self.tick

                ld.setdefault(p, {"bid": 0.0, "ask": 0.0})

                ld[p][key] += float(qty)

        return ld


class SerumAdapter:

    """Fetches order-book from Serum every N seconds (simplified)."""

    RPC = "https://api.mainnet-beta.solana.com"


    def __init__(self, market_address: str, tick_norm: float):

        self.market_addr = market_address

        self.tick = tick_norm

        self.ladder: Ladder = {}


    async def run(self):

        import aiohttp

        while True:

            try:

                async with aiohttp.ClientSession() as sess:

                    payload = {

                        "jsonrpc": "2.0",

                        "id": 1,

                        "method": "getOrderbook",

                        "params": [self.market_addr, {"limit": DEPTH_LIMIT}]

                    }

                    async with sess.post(self.RPC, json=payload, timeout=10) as r:

                        data = await r.json()

                        self.ladder = self._parse(data["result"])

            except Exception as e:

                log.warning("Serum RPC error %s", e)

            await asyncio.sleep(1)


    def _parse(self, result) -> Ladder:

        ladder: Ladder = {}

        for side_name, key in [("bids", "bid"), ("asks", "ask")]:

            for row in result.get(side_name, [])[:DEPTH_LIMIT]:

                price, qty, *_ = row

                p = round(float(price) / self.tick) * self.tick

                ladder.setdefault(p, {"bid": 0.0, "ask": 0.0})

                ladder[p][key] += float(qty)

        return ladder


# ------------------------ AGGREGATOR CORE ----------------------------------- #

class Aggregator:

    def __init__(self, tick_norm: float, redis_url: str | None = None):

        self.tick = tick_norm

        self.redis_url = redis_url

        self.redis = None


    async def init_redis(self):

        if self.redis_url and aioredis:

            self.redis = aioredis.from_url(self.redis_url, decode_responses=True)


    def merge(self, books: List[Ladder]) -> Ladder:

        ladder: Ladder = {}

        for book in books:

            for price, row in book.items():

                p = round(price / self.tick) * self.tick

                ladder.setdefault(p, {"bid": 0.0, "ask": 0.0})

                ladder[p]["bid"] += row.get("bid", 0)

                ladder[p]["ask"] += row.get("ask", 0)

        return ladder


    async def publish(self, symbol: str, ladder: Ladder):

        if not ladder:

            return

        bid = max((p for p, r in ladder.items() if r["bid"] > 0), default=None)

        ask = min((p for p, r in ladder.items() if r["ask"] > 0), default=None)

        print(f"{symbol} | top-bid {bid:.2f} | top-ask {ask:.2f} | spread {ask-bid:.2f}")

        if self.redis:

            await self.redis.publish(symbol, json.dumps(ladder))


# ---------------------------- MAIN ----------------------------------------- #

async def main():

    tick_norm = 0.01  # hard-code for USDT pairs; adjust if needed

    # --- start CEX streams

    cex_adapters = [ExchangeAdapter(e, SYMBOLS) for e in CEXES]

    cex_tasks = [a.stream_symbol(sym, tick_norm) for a in cex_adapters for sym in SYMBOLS]


    # --- start DEX streams (example markets)

    dydx = DyDxAdapter("BTC-USD", tick_norm)

    serum = SerumAdapter("9wFFo5AFZj7EBzLwGxFh8uRjwYwRApZW2Z7hJNPmT97z", tick_norm)  # BTC/USDC market address

    dex_tasks = [dydx.run(), serum.run()]


    agg = Aggregator(tick_norm, REDIS_URL)

    await agg.init_redis()


    async def loop():

        while True:

            for sym in SYMBOLS:

                books = [a.books.get(sym, {}) for a in cex_adapters]

                if sym.startswith("BTC"):

                    books.append(dydx.ladder)

                    books.append(serum.ladder)

                ladder = agg.merge(books)

                await agg.publish(sym, ladder)

            await asyncio.sleep(1)


    tasks = [*cex_tasks, *dex_tasks, loop()]


    # Graceful shutdown

    for s in (signal.SIGINT, signal.SIGTERM):

        asyncio.get_running_loop().add_signal_handler(s, lambda: asyncio.create_task(shutdown(tasks)))


    await asyncio.gather(*tasks)


async def shutdown(tasks):

    for t in tasks:

        t.cancel()

    await asyncio.gather(*tasks, return_exceptions=True)

    asyncio.get_event_loop().stop()


if __name__ == "__main__":

    try:

        asyncio.run(main())

    except KeyboardInterrupt:

        pass
